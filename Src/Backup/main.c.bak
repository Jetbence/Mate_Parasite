
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2019 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f0xx_hal.h"

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

#define PWR2(EXP)				(1ul << (EXP))

/* Private types--------------------------------------------------------------*/

typedef enum SystemState_t_
{
	SystemState_SystemInit = 0,
	
	SystemState_ChargerCheck,
	SystemState_NormalOperation,
	SystemState_Charging,
	SystemState_ToolOff,
	SystemState_Battery_Low,
	
} SystemState_t;

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/** Position of result in ADC_Results[]. */
 #define ADC_RESULT_POS_CUR				0
 #define ADC_RESULT_POS_CHG				1
 #define ADC_RESULT_POS_VOLT			2
 #define ADC_RESULT_POS_TEMP			3
 #define ADC_RESULT_POS_BAT				4

 #define ADC_REFERENCEVOLTAGE 		(3.3)
 #define ADC_RESOLUTION 			(12)
 #define CHG_ADC_STEPS 				 PWR2(ADC_RESOLUTION)

 #define BATTERY_LOW_VOLTAGE			3.0 	// eddig merülhet az akksi
	 
/**		Gain of measurement analog path.
 *		[V/V] */
 #define  ADC_CUR_GAIN				(1.5/(249+1.5))			// 167 ??? TODO
 #define  ADC_CHG_GAIN				(10.0/(10.0+10.0))		// 0.5
 #define  ADC_VOLT_GAIN				(10.0/(62.0+10.0))		// 0.1388
 #define  ADC_TEMP_GAIN				1
 #define  ADC_BAT_GAIN				(22.0/(9.1+22.0))		//0.7073

#define VOLTTODIGIT_CUR(V)						(int32_t)((float)(V)/(ADC_REFERENCEVOLTAGE/(CHG_ADC_STEPS*ADC_CUR_GAIN)))
#define VOLTTODIGIT_CHG(V)						(int32_t)((float)(V)/(ADC_REFERENCEVOLTAGE/(CHG_ADC_STEPS*ADC_CHG_GAIN)))
#define VOLTTODIGIT_VOLT(V)						(int32_t)((float)(V)/(ADC_REFERENCEVOLTAGE/(CHG_ADC_STEPS*ADC_VOLT_GAIN)))
#define VOLTTODIGIT_TEMP(V)						(int32_t)((float)(V)/(ADC_REFERENCEVOLTAGE/(CHG_ADC_STEPS*ADC_TEMP_GAIN)))
#define VOLTTODIGIT_BAT(V)						(int32_t)((float)(V)/(ADC_REFERENCEVOLTAGE/(CHG_ADC_STEPS*ADC_BAT_GAIN)))


#define SHOLD_Pin 				GPIO_PIN_5
#define SHOLD_GPIO_Port 		GPIOB

#define LED1_Pin 				GPIO_PIN_11
#define LED1_GPIO_Port 			GPIOA
#define LED2_Pin 				GPIO_PIN_12
#define LED2_GPIO_Port 			GPIOA
#define LED3_Pin 				GPIO_PIN_15
#define LED3_GPIO_Port 			GPIOA
#define BQ_EN_Pin				GPIO_PIN_4
#define BQ_EN_GPIO_Port			GPIOA
#define BQCHG_Pin				GPIO_PIN_3
#define BQCHG_GPIO_Port			GPIOA
#define SW_Pin					GPIOB
#define SW_GPIO_Port			GPIO_PIN_1

// PB5 (out)  -> uC selfhold
#define SHOLD_ON	SHOLD_GPIO_Port->BSRR = SHOLD_Pin
#define SHOLD_OFF	SHOLD_GPIO_Port->BRR  = SHOLD_Pin

#define BQ_EN_ON		BQ_EN_GPIO_Port->BRR = BQ_EN_Pin
#define BQ_EN_OFF		BQ_EN_GPIO_Port->BSRR= BQ_EN_Pin

#define BQCHG HAL_GPIO_ReadPin(BQCHG_GPIO_Port, BQCHG_Pin)
#define SW	  HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin)

// PA11 (out)  -> LED1
#define LED_RED_TOGGLE	LED1_GPIO_Port->ODR  ^= LED1_Pin
#define LED_RED_ON		LED1_GPIO_Port->BRR  = LED1_Pin		//	set pin to "1" 
#define LED_RED_OFF	LED1_GPIO_Port->BSRR = LED1_Pin		//  reset pin to "0"
// PA12 (out)  -> LED2
#define LED_YELLOW_TOGGLE	LED2_GPIO_Port->ODR  ^= LED2_Pin
#define LED_YELLOW_ON		LED2_GPIO_Port->BRR  = LED2_Pin		//	set pin to "1" 
#define LED_YELLOW_OFF	LED2_GPIO_Port->BSRR = LED2_Pin		//  reset pin to "0"
// PA15 (out)  -> LED3
#define LED_GREEN_TOGGLE	LED3_GPIO_Port->ODR  ^= LED3_Pin
#define LED_GREEN_ON		LED3_GPIO_Port->BRR  = LED3_Pin		//	set pin to "1" 
#define LED_GREEN_OFF	LED3_GPIO_Port->BSRR = LED3_Pin		//  reset pin to "0"

 
static volatile uint16_t ADC_Results[5];
uint16_t Switch_On_Timer = 0;
uint16_t VBAT_Seged = 0;
uint16_t VBAT_Blanking = 0;
uint32_t Tick_Main = 0;

static SystemState_t SystemState;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_NVIC_Init(void);

static void NormalOperation(void);
static void Charging(void);
static void ChargerCheck(void);
static void Shutdown(void);
static void ToolOff(void);
static void PeriodicTasks(void);
static void BatteryLow(void);


uint16_t Battery_Current(void);
uint16_t ChargerVoltage(void);
uint16_t BatteryPack_Voltage(void);
uint16_t Battery_Temperature(void);
uint16_t Battery_Voltage(void);


/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	
	SystemState = SystemState_SystemInit;
	
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
	
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADC_Results, 5);

	SystemState = SystemState_NormalOperation;

  /* USER CODE END 2 */

	SHOLD_ON;
	HAL_Delay(500); 		// delay kondik miatt

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
	PeriodicTasks();
		switch(SystemState)
		{
			case SystemState_Charging: 			Charging();				break;
			case SystemState_NormalOperation: 	NormalOperation();		break;
			case SystemState_ToolOff:			ToolOff();				break;
			case SystemState_Battery_Low:		BatteryLow();			break;
			default:							Shutdown();				break;
		}

  /* USER CODE BEGIN 3 */                                    

  }
  /* USER CODE END 3 */

}

void Charging(void)
{
	if (VOLTTODIGIT_CHG(5.5)> ChargerVoltage() && VOLTTODIGIT_CHG(4.5) < ChargerVoltage())
	{
		SHOLD_OFF;
		BQ_EN_ON;
		HAL_Delay(100);
		if (!BQCHG) 
			{
				LED_YELLOW_OFF;
				LED_RED_OFF;
				LED_GREEN_TOGGLE;
				HAL_Delay(500);
			}
			else
			{
				LED_GREEN_ON;
				BQ_EN_OFF;
				SystemState = SystemState_ToolOff;
				//Ha feltöltött akkor kapcsoljon ki -> Ugorjon a Tooloffba
			}
		
	}
	else SystemState = SystemState_ToolOff;
}

void PeriodicTasks(void)
{
	if (Tick_Main)
	{
		Tick_Main = 0;
		if (VOLTTODIGIT_BAT(BATTERY_LOW_VOLTAGE) > Battery_Voltage())
		{
			if (VBAT_Blanking) VBAT_Blanking--;
			else SystemState = SystemState_Battery_Low;			
		}
		else VBAT_Blanking = 50;
//		VBAT_Seged = VOLTTODIGIT_BAT(3);
	}
}

void NormalOperation(void)
{
	if(SW && Switch_On_Timer() > 3000)
		{
			BQ_EN_OFF;
			if (VOLTTODIGIT_CHG(0.2) < ChargerVoltage()) 
			{
				HAL_Delay(100);
				SystemState = SystemState_Charging;
			}
		}
}

void Shutdown(void)
{
	;
}

void ToolOff(void)
{
	LED_RED_OFF;
	SHOLD_OFF;
	while(1);
}

void BatteryLow(void)
{
	LED_GREEN_OFF;
	LED_YELLOW_OFF;
	LED_RED_OFF;
	HAL_Delay(500);
	LED_RED_ON;
	HAL_Delay(500);
	LED_RED_OFF;
	HAL_Delay(500);
	LED_RED_ON;
	HAL_Delay(500);
	LED_RED_OFF;
	HAL_Delay(500);
	LED_RED_ON;
	HAL_Delay(500);
	LED_RED_OFF;
	SHOLD_OFF;
	while(1);
}

void HAL_SYSTICK_Callback(void)
{
	Tick_Main = 1;
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
  /* I2C1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(I2C1_IRQn);
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART1_IRQn);
}

/* ADC init function */
static void MX_ADC_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_6;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

uint16_t Battery_Current(void)
{
	return (ADC_Results[0]);
}

uint16_t ChargerVoltage(void)
{
	return (ADC_Results[1]);
}

uint16_t BatteryPack_Voltage(void)
{
	return (ADC_Results[2]);
}

uint16_t Battery_Temperature(void)
{
	return (ADC_Results[3]);
}

uint16_t Battery_Voltage(void)
{
	return (ADC_Results[4]);
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
